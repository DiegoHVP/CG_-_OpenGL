:numbered:
:author: Diêgo Henrique
:icons:
:experimental:
:stem:
:imagesdir: ./imagens
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Respostas das Atividades OpenGL =

== Atividades e Respostas ==

=== Atividade proposta: Visualizador de Espectro Circular com Triângulos

Implementar um visualizador de espectro baseado em áudio MP3 utilizando FFTW, SDL2 e OpenGL. O espectro deve ser representado como um conjunto de triângulos dispostos ao redor de um círculo central, com a ponta de cada triângulo indicando a intensidade da frequência correspondente.

==== Resposta

Referência: arquivo `spectrosdl.cpp`

No codigo a função display() foi completamente reescrita. Antes, ela desenhava barras verticais (retângulos) em uma grade cartesiana. Agora ela desenha triângulos ao redor de um círculo central. A base de cada triângulo está na borda do círculo e a ponta do triângulo aponta para fora, e sua distância ao centro é proporcional à intensidade da frequência

Na função reshape() também precisei alterar para que o (0,0) fique no centro da tela e os valores de coordenadas sejam simétricos no eixo X e Y.
De:
[source, cpp]
----
glOrtho(0.0, BANDS, 0.0, 1.0, -1.0, 1.0);
----
Para:
[source, cpp]
----
float aspect = (float)w / (float)h;
if (aspect >= 1.0f)
    glOrtho(-aspect, aspect, -1.0, 1.0, -1.0, 1.0);
else
    glOrtho(-1.0, 1.0, -1.0 / aspect, 1.0 / aspect, -1.0, 1.0);
----

Cada frequência (banda) é representada por um ângulo:
[source, cpp]
----
float ang = 2.0f * M_PI * i / BANDS;
----
A direção para fora é obtida por:
[source, cpp]
----
float dx = cos(ang);
float dy = sin(ang);
----
A base do triângulo (borda do círculo) é:
[source, cpp]
----
float xL = raio_base * cos(ang - delta);
float yL = raio_base * sin(ang - delta);
float xR = raio_base * cos(ang + delta);
float yR = raio_base * sin(ang + delta);
----

A ponta do triângulo depende da intensidade:
[source, cpp]
----
float xP = (raio_base + intensidade) * dx;
float yP = (raio_base + intensidade) * dy;
----
==== Como compilar e executar

Instale as dependências no Linux:

[source, bash]
----
sudo apt install libsdl2-dev libsdl2-mixer-dev libfftw3-dev freeglut3-dev
----

Compile com:

[source, bash]
----
g++ spectrosdl.cpp -o spectrosdl -lSDL2 -lSDL2_mixer -lGL -lGLU -lglut -lfftw3 -std=c++11 -lm
----

Execute com:

[source, bash]
----
./spectrosdl caminho/para/audio.mp3
----

[[listagem_espectro, spectrosdl.cpp]]
[source,cpp]
.spectrosdl.cpp
----
include::spectrosdl.cpp[]
----

[.center]
image::saida.png[Visualização em forma de círculo]

== Bibliografia ==

[bibliography]
- Agostinho Brito Jr. https://github.com/agostinhobritojr/sdlspectrum
- Stephen Prata. 'C++ Primer Plus'. Addison-Wesley. 1990.
- http://www.cplusplus.com. 'Referência C++'

