:numbered:
:author: Diêgo Henrique
:icons:
:experimental:
:stem:
:imagesdir: ./imagens
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Respostas das Atividades OpenGL =

== Atividades e Respostas ==

=== Atividade: selecao.c

Utilizando o programa `exemplos/preenchimento.c` como referência, implemente um programa `selecao.c`. Este programa deverá desenhar numa janela com fundo branco, de dimensões 256x256 pixels, quatro polígonos com as mesmas coordenadas dos polígonos do programa de referência. Todos os polígonos devem estar inicialmente preenchidos de amarelo e com bordas pretas. Quando o usuário clicar com o botão esquerdo do mouse dentro de um dos polígonos, a cor de preenchimento deste polígono deverá mudar para uma cor aleatória. Quando a tecla `b` for pressionada, o programa passará a mudar as cores das bordas e não mais dos fundos dos polígonos. Quando a tecla `f` for pressionada, o programa passará a mudar as cores dos fundos dos polígonos e não mais das bordas.

==== Resposta

Referência: arquivo `selecao.c`

- Criada uma janela 256x256 pixels com fundo branco.
- O modo de exibição foi configurado para `GLUT_DOUBLE | GLUT_RGB`, habilitando o uso de buffer duplo para uma animação mais suave.
- Os quatro polígonos são inicializados com a cor de fundo amarela e bordas pretas.
- A função `desenha()` é responsável por renderizar os polígonos e suas bordas, desenhando primeiro o polígono preenchido (`GL_POLYGON`) e depois sua borda (`GL_LINE_LOOP`).
- A função `mouse()` detecta cliques do botão esquerdo. Ela converte as coordenadas do mouse para o sistema do OpenGL e verifica se o clique ocorreu dentro de algum dos quatro polígonos.
- Se um clique ocorre dentro de um polígono, uma cor RGB aleatória é gerada.
- A função `keyboard()` monitora as teclas 'b' e 'f'. Uma variável global `modo` controla se a cor a ser alterada é a do fundo (`modo=0`) ou da borda (`modo=1`).
- `glutPostRedisplay()` é chamado após cada evento de mouse ou teclado para solicitar que a janela seja redesenhada.
- `glutSwapBuffers()` é usado no final da função `desenha()` para trocar os buffers de vídeo, exibindo o quadro recém-desenhado de uma só vez.

[[listagem_selecao, selecao.c]]
[source,c]
.selecao.c
----
include::selecao.c[tag=selecao]
----

[.center]
image::selecao.png[Saída selecao]

---

=== Atividade: selecao_buffer_simples.c

Repita o item anterior utilizando buffer simples e comente os resultados obtidos.

==== Resposta

Referência: arquivo `selecao_buffer_simples.c`

- A implementação é quase idêntica à da versão com buffer duplo, com duas alterações principais.
- O modo de exibição foi alterado para `GLUT_SINGLE | GLUT_RGB`, configurando o uso de buffer simples.
- Na função `desenha()`, `glutSwapBuffers()` foi substituído por `glFlush()`. `glFlush()` força a execução de todos os comandos de desenho pendentes diretamente no buffer que está sendo exibido.
- **Resultado:** Ao usar buffer simples, é possível notar um efeito de "flickering" (cintilação) quando as cores são alteradas. Isso ocorre porque o usuário pode ver o processo de redesenho da tela. O `glClear` limpa a tela para branco, e em seguida cada polígono é desenhado um a um. Esse processo, que é instantâneo no buffer duplo (pois ocorre em um buffer oculto), torna-se visível no buffer simples.

[[listagem_selecao_buffer_simples, selecao_buffer_simples.c]]
[source,c]
.selecao_buffer_simples.c
----
...
void desenhar(){
...
include::selecao_buffer_simples.c[tag=buffer2]
}
...
int main(int argc, char** argv){
...
include::selecao_buffer_simples.c[tag=buffer1]
...
}
----

[.center]
image::selecaoBufferSimples.png[Saída selecao_buffer_simples]

---

=== Atividade: hexagono_DH.c

Crie um padrão de preenchimento com as iniciais dos seu nome e sobre nome, por exemplo, AB, para Agostinho Brito. Implemente um programa que desenhe em uma janela de fundo branco de dimensões 300x300 pixels um hexágono com bounding box de dimensões 200x200 pixels. O hexágono deve estar centrado na tela e preenchido com cor azul, utilize este padrão de preenchimento criado.

==== Resposta

Referência: arquivo `hexagono_DH.c`

- Criada uma janela de 300x300 pixels com fundo branco.
- O sistema de coordenadas foi definido com `glOrtho(0, 300, 0, 300, -1, 1)`.
- Um hexágono regular foi desenhado usando `glBegin(GL_POLYGON)` com seis vértices calculados para centralizá-lo na janela.
- A cor do hexágono foi definida como azul sólido usando `glColor3f(0, 0, 1)`.
- O "padrão de preenchimento" com as iniciais foi implementado desenhando caracteres de bitmap sobre o hexágono já renderizado.
- A função `glRasterPos2i()` foi usada para posicionar o cursor de desenho antes de renderizar cada inicial.
- A função `glutBitmapCharacter()` foi chamada duas vezes para desenhar as letras 'D' e 'H' na cor branca, que é a cor padrão após a definição da cor do hexágono.
- `glFlush()` é chamado para garantir que o desenho seja exibido na tela.

[[listagem_hexagono_DH, hexagono_DH.c]]
[source,c]
.hexagono_DH.c
----
include::hexagono_DH.c[]
----

[.center]
image::hexagono_DH.png[Saída hexagono_DH]

---

== Bibliografia ==

[bibliography]
- Agostinho Brito Jr. 'Preenchimento de regioes' https://agostinhobritojr.github.io/tutorial/opengl/preenchimento.html
- Stephen Prata. 'C++ Primer Plus'. Addison-Wesley. 1990.
- http://www.cplusplus.com. 'Referência C++'