:numbered:
:author: Diêgo Henrique
:icons:
:experimental:
:stem:
:imagesdir: ./imagens
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Respostas das Atividades OpenGL =

== Atividades e Respostas ==

==== Atividade 1:
Comente as funcionalidades das curvas de Bézier e NURBS utilizadas neste exemplo.

==== Resposta:

Curvas de Bézier (com glMap1f() e glEvalCoord1f())
São curvas polinomiais definidas por um conjunto fixo de pontos de controle.
Neste exemplo o glMap1f() configura o mapeamento da curva a partir dos pontos vertices. O glEvalCoord1f() calcula pontos da curva para diferentes valores de u (entre 0 e 1). Por fim um laço com glEvalCoord1f() desenha a curva conectando os pontos com GL_LINE_STRIP.
Vantagem: Simples de implementar e computar.
Limitação: Menos flexível para curvas complexas e com muitos segmentos.

Curvas NURBS (com gluNurbsCurve())
São curvas mais avançadas, que permitem maior controle de forma usando pontos de controle, Vetores de nós (nos[]), Ordem da curva, e Pesos (implícitos).
Neste exemplo o gluNurbsCurve() usa o vetor nos para determinar onde a curva se aproxima ou passa pelos pontos. Já gluBeginCurve() e gluEndCurve() marcam o início/fim da curva.
Vantagem: aqui temos curvas mais flexíveis, permitem criar curvas suaves e complexas.
Limitação: Mais difíceis de configurar corretamente.


==== Atividade 2:
Utilizando o programa exemplos/splines2d.c como referência, implemente um programa splinesnurbs.c. Quando a tecla u for pressionada, a NURBS deverá ser desenhada utilizando um vetor de nós uniforme. Quando a tecla o for pressionada, a NURBS deverá ser desenhada utilizando um vetor de nós uniforme aberto. Quando a tecla n for pressionada, a NURBS deverá ser desenhada utilizando um vetor de nós não uniforme.

==== Resposta:
_Topic: Implemente um programa baseado em `splines2d.c`. O programa deverá reagir às teclas:_
- `u`: NURBS com vetor de nós uniforme.
- `o`: NURBS com vetor de nós uniforme aberto.
- `n`: NURBS com vetor de nós não uniforme.

[[listagem_splinesnurbs, splinesnurbs.c]]
[source,c]
.splinesnurbs.c
----
include::splinesnurbs.c[]
----

[.center]
image::nurbsUniforme.png[NURBS com vetor uniforme]

[.center]
image::nurbsAberto.png[NURBS com vetor uniforme aberto]

[.center]
image::nurbsNaoUniforme.png[NURBS com vetor não uniforme]

----

==== Atividade 3:
Qual a influência do vetor de nós foi utilizado sobre o comportamento das curvas tipo NURBS? Comente o resultado que obteve para curvas de ordens 3 e 5

==== Resposta:
_Topic: Comente o comportamento visual da curva com diferentes tipos de vetor de nós (uniforme, uniforme aberto, não uniforme). Compare os resultados obtidos usando curvas de ordem 3 e ordem 5._

----

==== Atividade 4:
Compare curvas de Beziér com NURBS considerando ordens iguais para ambas as curvas.

==== Resposta:
_Topic: Compare curvas de Bézier e NURBS quando ambas forem configuradas com mesma ordem. Considere flexibilidade, controle, suavidade e complexidade de implementação._

----

== Bibliografia

[bibliography]
- Agostinho Brito Jr. 'Curvas e Superfícies com OpenGL' https://agostinhobritojr.github.io/tutorial/opengl/splines.html
- Addison-Wesley. 'OpenGL Programming Guide'.
- https://www.khronos.org/opengl/wiki/NURBS

