:numbered:
:author: Diêgo Henrique
:icons:
:experimental:
:stem:
:imagesdir: ./imagens
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Respostas das Atividades OpenGL =

== Atividades e Respostas ==

=== Atividade 1:
Comente as funcionalidades das curvas de Bézier e NURBS utilizadas neste exemplo.

==== Resposta:

Curvas de Bézier (com glMap1f() e glEvalCoord1f())
São curvas polinomiais definidas por um conjunto fixo de pontos de controle.
Neste exemplo o glMap1f() configura o mapeamento da curva a partir dos pontos vertices. O glEvalCoord1f() calcula pontos da curva para diferentes valores de u (entre 0 e 1). Por fim um laço com glEvalCoord1f() desenha a curva conectando os pontos com GL_LINE_STRIP.
Vantagem: Simples de implementar e computar.
Limitação: Menos flexível para curvas complexas e com muitos segmentos.

Curvas NURBS (com gluNurbsCurve())
São curvas mais avançadas, que permitem maior controle de forma usando pontos de controle, Vetores de nós (nos[]), Ordem da curva, e Pesos (implícitos).
Neste exemplo o gluNurbsCurve() usa o vetor nos para determinar onde a curva se aproxima ou passa pelos pontos. Já gluBeginCurve() e gluEndCurve() marcam o início/fim da curva.
Vantagem: aqui temos curvas mais flexíveis, permitem criar curvas suaves e complexas.
Limitação: Mais difíceis de configurar corretamente.


=== Atividade 2:
Utilizando o programa exemplos/splines2d.c como referência, implemente um programa splinesnurbs.c. Quando a tecla u for pressionada, a NURBS deverá ser desenhada utilizando um vetor de nós uniforme. Quando a tecla o for pressionada, a NURBS deverá ser desenhada utilizando um vetor de nós uniforme aberto. Quando a tecla n for pressionada, a NURBS deverá ser desenhada utilizando um vetor de nós não uniforme.

==== Resposta:
Implemente um programa baseado em `splines2d.c`. O programa deverá reagir às teclas:
- `u`: NURBS com vetor de nós uniforme.
- `o`: NURBS com vetor de nós uniforme aberto.
- `n`: NURBS com vetor de nós não uniforme.

[[listagem_splinesnurbs, splinesnurbs.c]]
[source,c]
.splinesnurbs.c
----
include::splinesnurbs.c[]
----

[.center]
image::A.png[NURBS com vetor uniforme]

[.center]
image::B.png[NURBS com vetor uniforme aberto]

[.center]
image::C.png[NURBS com vetor não uniforme]



=== Atividade 3:
Qual a influência do vetor de nós foi utilizado sobre o comportamento das curvas tipo NURBS? Comente o resultado que obteve para curvas de ordens 3 e 5

==== Resposta:
O vetor de nós define a influência de cada ponto de controle na curva NURBS. Ele divide o domínio paramétrico da curva, afetando onde a curva começa e termina, se ela passa ou apenas se aproxima dos pontos de controle e a suavidade e continuidade da curva.
Para um vetor uniforme de ordem 3 e 5, forma uma curva mais centralizada, suave, mas não interpoladora (não passa por todos os vértices).
Para um vetor uniforme aberto temos nós repetidos
    Para ordem 3: mais simples, começa e termina nos extremos.
    Para ordem 5: curva ainda mais suave, mas com menor resposta local (mais pontos afetam um mesmo trecho).
Para um Vetor Não Uniforme temos espaçamento e valores manualmente ajustados.o que resulta em maior controle local da forma da curva.
    Para ordem 3: curvas com variações mais perceptíveis conforme os nós mudam.
    Para ordem 5: controle fino, mas pode gerar instabilidade visual se mal definido.

=== Atividade 4:
Compare curvas de Beziér com NURBS considerando ordens iguais para ambas as curvas.

==== Resposta:
Para ordem 3:
    Bézier gera uma curva suave, mas cada ponto afeta toda a curva.
    NURBS com nós bem distribuídos permite ajuste local, e pode interpolar extremos.
Para ordem 5:
    Bézier continua com influência global de cada ponto.
    NURBS fica mais suave ainda, mas exige vetor de nós bem ajustado para evitar distorções

== Bibliografia

[bibliography]
- Agostinho Brito Jr. 'Curvas e Superfícies com OpenGL' https://agostinhobritojr.github.io/tutorial/opengl/splines.html
- Addison-Wesley. 'OpenGL Programming Guide'.
- https://www.khronos.org/opengl/wiki/NURBS

