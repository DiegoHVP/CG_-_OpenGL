:numbered:
:author: Diêgo Henrique
:icons:
:experimental:
:stem:
:imagesdir: ./imagens
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Respostas das Atividades OpenGL =

== Atividades e Respostas ==

=== Atividade: quadrados4.c

Utilizando o programa exemplos/teste-make.c como referência, implemente um programa quadrados4.c. Este programa deverá desenhar numa janela com fundo branco, de dimensões 256x256 pixels, e quatro quadrados de cores diferentes arranjados na janela.

==== Resposta

Referência: arquivo `quadrados4.c`

- Criada janela com dimensões 256x256 pixels usando `glutInitWindowSize` e `glutCreateWindow`.
- Definido fundo branco através da função `glClearColor(1.0, 1.0, 1.0, 1.0)`.
- Configurado sistema de coordenadas ortogonais com `glOrtho(0, 256, 0, 256, -1, 1)` para definir a área visível.
- Implementada função `desenha()` associada ao `glutDisplayFunc`, responsável por desenhar na janela.
- Dentro de `desenha()`, invocado `glClear(GL_COLOR_BUFFER_BIT)` para limpar a tela antes de cada novo desenho.
- Desenhados quatro quadrados usando `glBegin(GL_QUADS)` e quatro chamadas `glVertex2i` para os vértices.
- Para cada quadrado, definida uma cor distinta com `glColor3f`.
- Quadrados posicionados em diferentes regiões da janela modificando os valores dos vértices.
- Por fim, chamada a função `glFlush()` para forçar a execução dos comandos OpenGL e exibir o desenho.

[[listagem_quadrados4, quadrados4.c]]
[source,c]
.quadrados4.c
----
include::quadrados4.c[]
----

[.center]
image::quadrados4.png[Saída quadrados4]

---

=== Atividade: quadradoscolor.c

Utilizando o programa exemplos/teste-make.c como referência, implemente um programa quadradoscolor.c. Este programa deverá desenhar numa janela com fundo branco, de dimensões 256x256 pixels, um quadrado com as mesmas dimensões do quadrado original. Entretanto, cada uma das cores determinadas para os quatro vértices do quadrado deverão ser determinadas a partir de valores calculados via modelo HSI. Implemente um temporizador para os valores de H mudarem com o tempo para os vértices, produzindo uma pequena animação. Comente a linha glShadeModel(GL_FLAT) para que o feito de degradê possa ser visualizado.

==== Resposta

Referência: arquivo `quadradoscolor.c`

- Criada janela 256x256 pixels e fundo branco com `glClearColor`.
- Definido sistema de coordenadas ortogonais usando `glOrtho(0, 256, 0, 256, -1, 1)`.
- Configurado o modo de interpolação de cores por vértice (shading) removendo o `glShadeModel(GL_FLAT)` para usar o padrão Gouraud.
- Definida função `desenha()` para desenhar um único quadrado com `glBegin(GL_QUADS)`.
- Calculadas as cores de cada vértice a partir do modelo HSI, convertendo HSI para RGB.
- Implementado um temporizador usando `glutTimerFunc` para atualizar o valor de H continuamente.
- O valor de H é incrementado e limitado a 360°, garantindo a variação contínua de cor.
- A cada chamada do temporizador, a função `glutPostRedisplay()` é usada para forçar o redesenho da janela.
- Com isso, os vértices do quadrado mudam de cor suavemente ao longo do tempo, criando o efeito de degradê animado.
- `glFlush()` utilizado ao final para renderizar os comandos.

[[listagem_quadradoscolor, quadradoscolor.c]]
[source,c]
.quadradoscolor.c
----
include::quadradoscolor.c[]
----

[.center]
image::quadradoscolor.png[Saída quadradoscolor]

---

== Bibliografia ==

[bibliography]
- Agostinho Brito Jr. 'Conceitos iniciais' http://agostinhobritojr.github.io/tutorial/opengl/conceitos.html
- Stephen Prata. 'C++ Primer Plus'. Addison-Wesley. 1990.
- http://www.cplusplus.com. 'Referência C++'

