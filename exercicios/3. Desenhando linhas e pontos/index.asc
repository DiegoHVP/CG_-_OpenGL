:numbered:
:author: Diêgo Henrique
:icons:
:experimental:
:stem:
:imagesdir: ./imagens
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Respostas das Atividades OpenGL =

== Atividades e Respostas ==

=== Atividade 1: quadrados.c

Utilizando o programa `linha.c` como referência, implemente um programa `quadrados.c`. Este programa deverá desenhar numa janela com fundo branco, de dimensões 256x256 pixels, um quadrado vermelho, com vértice superior esquerdo de coordenadas (30, 226) e inferior direito em (226, 30). Quando a tecla `a` for pressionada, o quadrado deve ficar azul, e quando `v` for pressionada, volta para vermelho.

==== Resposta

Referência: arquivo `linha.c`

 Aqui criamos:
- Janela 256x256 criada com `glutInitWindowSize`.
- Foi aplicado um fundo branco com `glClearColor(1.0, 1.0, 1.0, 1.0)`.
- O Sistema de coordenadas ortogonais com `glOrtho(0, 256, 0, 256, -1, 1)`.
- Função `display()` para desenha o quadrado usando `GL_QUADS`.
- Cor controlada por vetor global `cor[3]` .
- Teclas `a` e `v` controlam a troca de cor via `keyboard()`.
- Comando `glutPostRedisplay()` usado após troca de cor para forçar redesenho.

[[listagem_quadrados, quadrados.c]]
[source,c]
.quadrados.c
----
include::quadrados.c[]
----

[.center]
image::quadradoRed.png[Quadrado Vermelho]

[.center]
image::quadradoBlue.png[Quadrado Azul]

A estratégia foi partir do código `linha.c`, mantendo a configuração inicial de janela e coordenadas, e adicionar um vetor global para armazenar a cor do quadrado. O desenho foi feito com `GL_QUADS`, e a troca de cor foi controlada via teclado, atualizando o vetor de cor e forçando o redesenho com `glutPostRedisplay()`.

---

=== Atividade 2: Bresenham para linhas

Implemente o algoritmo de Bresenham para traçado de linhas, utilizando `GL_POINTS` como parâmetro da função `glBegin()`. Desenhe uma reta verde do ponto (40, 200) ao (200, 10).

==== Resposta

Aqui implementei:
- Um algoritmo para desenhar linha pixel a pixel.
- Um controle de erro acumulado para decidir avanço em X ou Y.
- Uso de `glBegin(GL_POINTS)` e `glVertex2i(x, y)` para desenhar cada ponto.
- Chamada feita a partir da `display()` configurada no programa principal.

[[listagem_bresenhamline, bresenham.c]]
[source,c]
.bresenhamLine()
----
include::bresenham.c[tag=line]
----

[.center]
image::bresenhamLine.png[Reta com Bresenham]

Para essa atividade, a estratégia foi implementar o algoritmo clássico de Bresenham para linhas, controlando o erro incremental a cada passo e decidindo qual coordenada incrementar. O desenho usa `GL_POINTS` para simular pixels, garantindo alta precisão no traçado da reta.

---

=== Atividade 3: Bresenham para circunferência

Implemente o algoritmo de Bresenham para circunferências, utilizando `GL_POINTS`. Desenhe uma circunferência azul de raio 50 centrada em (128, 128).

==== Resposta
Na implementação da bresenhamCirculo foi.
- Algoritmo desenha ponto a ponto aproveitando simetria em 8 octantes.
- Cálculo de erro e atualização das variáveis `x`, `y` e `d` a cada iteração.
- Desenho com `glBegin(GL_POINTS)` e `glVertex2i` nos 8 octantes.
- Chamada feita pela `display()` no programa principal.

[[listagem_bresenhamcircle, bresenham.c]]
[source,c]
.bresenhamCircle()
----
include::bresenham.c[tag=circle]
----

[.center]
image::bresenhamCirculo.png[Circulof com Bresenham]

A estratégia adotada foi usar o algoritmo de Bresenham para circunferências, que calcula apenas os pontos de um oitavo da circunferência e replica os resultados nos demais octantes, explorando a simetria. Isso otimiza o número de cálculos e mantém o traçado preciso.


---

== Bibliografia

[bibliography]
- Agostinho Brito Jr. 'Desenhando linhas e pontos' https://agostinhobritojr.github.io/tutorial/opengl/linhas_e_planos.html
- Stephen Prata. 'C++ Primer Plus'. Addison-Wesley.
- http://www.cplusplus.com 'Referência C++'

